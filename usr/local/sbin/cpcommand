#!/bin/bash
#
# This code is shipped under the Artistic License 2.0. See the file
# Artistic-License-2.0.txt or http://opensource.org/licenses/Artistic-2.0
#
#+--------------------------------------------------------------------------+
#
# cpcommand - issue a CP command on a specified z/VM LPAR 
#
#+--------------------------------------------------------------------------+
function usage
# Give help
# Args: none 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo ""                                  # leave some room
  echo "Name:   cpcommand - issue a CP command on a specified z/VM LPAR"
  echo "Usage:  cpcommand [OPTIONS] SYSTEM-ID CP-COMMAND"
  echo "Where:  SYSTEM-ID  is the z/VM system to run the CP command on"
  echo "Where:  CP-COMMAND is CP command to invoke"
  echo ""
  echo "OPTIONS:"
  echo "  -h|--help             Give help"
  echo "  -s|--silent           Minimal output"
  echo "  -v|--verbose          Include additional output"
  echo "  -V|--veryverbose      Include even more output"
  echo "  -x|--debug            Print commands and arguments as they are executed"
  echo ""                                  # leave some room
  exit 51
 }                                         # usage()

#+--------------------------------------------------------------------------+
function parseArgs
# Parse arguments 
# Arg 1: all arguments passed into scriopt 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  while (( "$#" )); do                     # iterate through all flags and arguments
    case $1 in
      -h|--help)
        usage
        ;;
      -s|--silent)
        verbose=0
        flags="$flags -s"
        ;;
      -v|--verbose)
        verbose=2
        flags="$flags -v"
        ;;
      -V|--veryverbose)
        verbose=3
        flags="$flags -V"
        ;;
      -w)                                  # undocumented - called from Web UI
        webUI=yes
        shift                              # one arg is user apache is running as 
        if [ $# = 0 ]; then                # no description following --desc
          echo "ERROR: No USER following the -w flag"
          exit 3                           # internal server error 
        fi
        USER=$1                            # user apache is running as
        ;;
      -x|--debug)
        flags="$flags -x"
        set -vx
        ;;
      *)                                   # non-flag args 
        if [ "${1:0:1}" = "-" ]; then      # error - unrecognized flag
          echo "ERROR: unrecognized flag $1"
          usage 
        fi
        if [ ${#systemID} = 0 ]; then      # first arg 
          systemID=`echo $1 | tr [:lower:] [:upper:]` # fold to upper case
        else                               # second arg
          cpCmd="$@"                       # all remaining args are the CP command 
          break;                           # out of while loop
        fi
        ;;
    esac
    shift
  done
 }                                         # parseArgs()

#+--------------------------------------------------------------------------+
function checkEnv
# Verify the environment 
# Args: none
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  if [ ! -f $confFile ]; then 
    echo "ERROR: Configuration file $consFile does not exist" 
    exit 4                                 # cannot perform operation
  fi
  if [ ${#USER} = 0 ]; then                # env var USER not set
    echo "ERROR: The environment variable USER must be set"
    exit 2                                 # not authorized
  fi
  if [ "$USER" = root ]; then 
    echo "ERROR: Sorry, cpcommand cannot run as root" 
    exit 2                                 # not authorized
  fi
 }                                         # checkEnv()

#+--------------------------------------------------------------------------+
function sendCPcommand
# Spool one z/VM console on this local LPAR or a remote one
# NOTE: if remote, this function will be called and will become local
# Args: none
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local cmd                                # a command
  local engServer 
  local rc                                 # a return code

  verboseMsg "trying to get engineering server with: getEngServer $systemID"
  local engData=`getEngServer $systemID` # search input file for engineering server
  verboseMsg "engData = $engData"
  if [ "$engData" = "not found" ]; then 
    echo "ERROR: did not find LPAR $systemID in $confFile"
    exit 1                               # object not found
  fi
  engServer="${engData% *}"              # eng'g server is first token 
  tgtEnv="${engData#* }"                 # environment is second token 
  verboseMsg "found engineering server $engServer environment = $tgtEnv"

  # send the CP command
  cmd="$sshCmd $engServer sudo vmcp $cpCmd"
  if [ $verbose -ge 1 ]; then              # issue message unless in silent mode
    echo "Executing CP command with: $cmd"
  fi
  eval $cmd                                # run the command
 }                                         # sendCPcommand()

#+--------------------------------------------------------------------------+
# Global variables
declare -A arr                             # array of environments/eng'g servers/LPARs/
cmdCalled=`basename $0`                    # get the name of the script called
confFile="/etc/consolez.conf"              # configuration file that must exist            
cpCmd=""                                   # the CP command to execute
flags=""                                   # flags to pass on to remote calls
systemID=""                                # target z/VM LPAR
tgtEnv="none"                              # target environment
verb=""                                    # operation being performed
verbose="1"                                # default verbosity level
vmcpCmd="sudo vmcp --buffer=1M"            # command to issue "vmcp"
webUI="no"                                 # called from the Web UI?

# main()
source /usr/local/sbin/consfuncs           # import common functions
parseArgs $@                               # parse arguments
checkEnv                                   # verify environment
readConfFile                               # read the /etc/consolez.conf file
sendCPcommand                              # issue requested CP command

