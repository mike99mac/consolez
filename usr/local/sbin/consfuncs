#!/bin/bash
#
# consfuncs - functions common to consolez
#
#+--------------------------------------------------------------------------+
function verboseMsg
# write a message to stdout when -v|--verbose (2) or -V|--veryverbose (3) are set
# Args: the message to write
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  if [ "$verbose" = 2 ]; then              # verbose
    echo -e "$@"
  elif [ "$verbose" = 3 ]; then            # very verbose
   echo -e "spoolcons: ${FUNCNAME[1]}: $@"
  fi
 }                                         # verboseMsg()

#+--------------------------------------------------------------------------+
function readConfFile
# Read the /etc/consolez.conf file
# Args: none
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  if [ ${#fromServer} != 0 ]; then         # being called from another spoolcons
    return                                 # do not have to read conf file
  fi
  local rc                                 # a return code
  local inputLines
  verboseMsg "reading configuration file $confFile"
  inputLines=`cat $confFile `              # configuration file in a variable
  rc=$?
  if [ "$rc" != 0 ]; then                  # error reading input file
    echo "ERROR! reading input file with cat $confFile returned $rc"
    exit 4                                 # cannot perform operation
  fi 
  local LPARnum=0                          # z/VM number 
  local lineNum=0                          # current line number
  local curEnv=""                          # current environment
  local nextLine                           # next line in input file
  local success=true                       # assume success

  exec 3<&0                                # link file descriptor #3 with stdin.
  while read -u 3 nextLine; do             # read from file descriptor 3
    let lineNum=$lineNum+1                 # keep count of lines
    if [ "${nextLine:0:1}" = '#' ]; then   # this is a comment
      continue                             # iterate loop
    fi
    local numFields=`echo $nextLine | awk '{print NF}'` # get number of fields on line
    if [ "$numFields" = 0 ]; then          # this is a blank line
      continue                             # iterate loop
    fi
    local numEquals=`echo $nextLine | awk -F= '{print NF}'` # get number of fields around equals signs 
    if [ "$numEquals" = 2 ]; then          # this is a variable assignment
      local varName=`echo ${nextLine%=*} | xargs`   # get variable name, trim whitespace
      local varValue=`echo ${nextLine#*=}  | awk '{print $1}' | sed 's/"//g'` # get variable value
      case $varName in 
        consolezDir)
          consolezDir="$varValue"          # where all console data is
          verboseMsg "consolezDir is set to $consolezDir"
          ;;
        consolezUser)
          consolezUser="$varValue"
          if [ ! -d $HOME ]; then          # current USER does not have a home directory
            echo "ERROR: user $USER must have a home directory in $HOME"
            exit 4                         # cannot perform operation
          fi
          tmpConsFile="/home/$USER/tmpConsFile" # temp file to store latest console data 
          verboseMsg "tmpConsFile is set to $tmpConsFile"
          ;;
        admins)                            # GID of full administrators
          local re='^[0-9]+$'
          if ! [[ "$varValue" =~ $re ]] ; then
            echo "ERROR: $varValue is not a number on line $lineNum of $confFile" 
            exit 4                         # cannot perform operation
          fi
          admins="$varValue"
          ;;
        netadmins)                         # GID of network administrators
          local re='^[0-9]+$'
          if ! [[ "$varValue" =~ $re ]] ; then
            echo "ERROR: $varValue is not a number on line $lineNum of $confFile" 
            exit 4                         # cannot perform operation
          fi
          netadmins="$varValue"
          ;;
        *) 
          echo "ERROR: unrecognized variable $varName on line $lineNum of $confFile - valid: consolezDir, consolezUser admins & netadmins"
          exit 4                           # cannot perform operation
          ;;
      esac
      continue                             # iterate loop
    fi
    if [ "${nextLine:0:11}" = environment ]; then # new environment
      if [ "$numFields" != 2 ]; then       # error
        success=false
        echo "ERROR: expected 2 fields but found $numFields on line $lineNum of $confFile: $nextLine"
        break                              # out of loop
      fi
      curEnv=`echo $nextLine | awk '{print $2}'` # 2nd token in name of environment
      verboseMsg "processing new environment $curEnv"
      envs="$envs $curEnv"                 # add to list of environments
    else                                   # not a comment blank line nor environment
      if [ ${#curEnv} = 0 ]; then          # first environment not found
        echo "ERROR: line $lineNum of $confFile must start with 'environment'"
        success=false
        break                              # out of loop
      fi
      if [ "$numFields" -lt 2 ]; then # error
        success=false
        echo "ERROR: expected 2 fields but found $numFields on line $lineNum of $confFile: $nextLine"
        break                              # out of loop
      fi
      let LPARnum=$LPARnum+1               # increment LPAR count
      arr[$LPARnum,engServer]=`echo "$nextLine" | awk '{print $1}'` # engineering server is first token
      arr[$LPARnum,systemID]=`echo "$nextLine" | awk '{print $2}'`  # z/VM system identifier is second token
      arr[$LPARnum,env]="$curEnv"          # save environment
    fi
  done 3< <(echo "$inputLines")            # read from input on file descriptor 3
  numLPARs=$LPARnum                        # number of LPARs processed
 }                                         # readConfFile()

#+--------------------------------------------------------------------------+
function CPcmd
# invoke a CP command with the vmcp module/command
# Args 1-n: the command to issue
# Return:   the CP return code (not the vmcp rc)
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local CPrc=0                             # assume CP command succeeds
  local rc

  verboseMsg "on $thisServer invoking CP command: $vmcpCmd $@"
  CPout=`$vmcpCmd $@ 2>&1`                 # run the CP command
  rc=$?
  if [ "$rc" = 2 ]; then                   # output buffer overflow
    local bytes=`echo $CPout | awk -F'(' '{print $2}' | awk '{print $1}'`
    if [[ "$bytes" -gt 1048576 ]]; then    # output too large
      echo "WARNING: Unable to get CP output of $bytes bytes - larger than 1 MB"
      return 11                            # so caller can exit 11
    fi
    verboseMsg "increasing vmcp buffer size to $bytes bytes and trying again"
    CPout=`$vmcpCmd --buffer=$bytes $@ 2>&1`
    local rc2=$?
    if [ $rc2 != 0 ]; then                 # capture the CP return code after "#"
      CPrc=`echo $CPout | grep "Error: non-zero CP" | awk -F# '{print $2}'`
    fi
  elif [ $rc != 0 ]; then                  # capture the CP return code after "#"
    CPrc=`echo $CPout | grep "Error: non-zero CP" | awk -F# '{print $2}'`
  fi
  if [ ${#CPout} != 0 -a "$CPverbose" != "no" ]; then
    echo "$CPout"                          # show CP output in verbose mode
  fi
  return $CPrc                             # return code from CP
 }                                         # CPcmd()

#+--------------------------------------------------------------------------+
function getEngServer
# Given a z/VM system ID, return the engineering server and environment or 'not found'
# Arg 1: LPAR being queried
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local theLPAR=$1                         # target z/VM System ID
  if [ ${#theLPAR} = 0 ]; then             # unexpected
    echo "ERROR: no args passed to getEngServer"
    exit 3                                 # internal server error
  fi
  local i
  for i in `seq 1 $numLPARs`; do
    if [ "${arr[$i,systemID]}" = "$theLPAR" ]; then # found it
      echo "${arr[$i,engServer]} ${arr[$i,env]}" # return engineering server
      return                               # all done
    fi
  done
  echo "not found"                         # did not find LPAR
 }                                         # getEngServer()

#+--------------------------------------------------------------------------+
# global variables
sshCmd="/usr/bin/ssh -q"                   # command to SSH to other nodes

