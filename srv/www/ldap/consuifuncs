#!/bin/bash
#
# This code is shipped under the Artistic License 2.0. See the file
# Artistic-License-2.0.txt or http://opensource.org/licenses/Artistic-2.0
#
#+--------------------------------------------------------------------------+
#
# consuifuncs - functions common to consolez Web UI interface  
#
#---------------------------------------------------------------------------
function startPage
# Common Web page header
# Args: page title
#---------------------------------------------------------------------------
 {
  local title="$@"

  echo "Content-type: text/html"
  echo ""
#echo "top of startPage">>/home/zadmin/fubar
  echo '<!DOCTYPE html><head><meta https-equiv="Content-Type" content="text/html; charset=iso-8859-1" />'
  echo "<link rel=\"icon\" href=\"/$webIcon\" type=\"image/x-icon\"/>"
  echo "<title>$title</title>"
  local wallpaper=""                       # assume no wallpaper
  if [ ${#webWallpaper} != 0 -a "$webWallpaper" != "none" ]; then # wallpaper is specified
    wallpaper="background=\"/$webWallpaper\""
  fi
  echo "<body style=\"font-family:$webFont\" $wallpaper>"
 }                                         # startPage()

#+--------------------------------------------------------------------------+
function startTable
# Start an HTML table using the consolezTable CSS
# Args: $1 id of the table
#       $2 table class "basic" "consolezTable" "invisible"
# Global variables:
#+--------------------------------------------------------------------------+
 {
  local tableid="consolezTable"
  if [ ${#1} != 0 ]; then
    tableid=$1
  fi
  local tableclass="consolezTable"
  if [ ${#2} -gt 0 ]; then                 # if there is a second argument then its a table class
    if [ "$2" = "basic" ]; then
      tableclass="basicTable"
    elif [ "$2" = "invisible" ]; then
      tableclass="invisibleTable"
    else
      tableclass="consolezTable"
    fi
  fi
  echo "<table id=\"$tableid\" class=\"$tableclass\">"
 }                                         # startTable()

#---------------------------------------------------------------------------
function startRow
# Arg 1: color for the row (optional)
#---------------------------------------------------------------------------
 {
  local color=$1
  local args=""

  if [ ${#color} -gt 0 ]; then             # a color was passed in
    args=" style=\"background-color:$color;\""
  fi
  echo "<tr$args>"
 }                                         # startRow()

#+--------------------------------------------------------------------------+
function drawButtons
# Draw buttons to
#   (1) Spool the current user ID's console (for onecons)
#   (2) Return to main window
# Args: None
#+--------------------------------------------------------------------------+
 {
  local greenStyle="style=\"background-color:#8CFF66\""
  local yellowStyle="style=\"background-color:#FFDB4D\""

  # start the table
  echo "<br><table align=center><tr><td>"  # leave room, start table, row and cell

  # add a 'Home' to all pages except consolez 
  if [ "$cmdCalled" != consolez ]; then    # add the button
    echo "<td><form action='/ldap/consolez' accept-charset=utf-8>"
    echo "<button class=button $yellowStyle>Home</button>"
    echo "</form></td>"                    # end form, cell
  fi

  # add a 'Refresh console' button to onecons and searchforcons 
  if [ "$cmdCalled" = onecons -o "$cmdCalled" = searchforcons ]; then      
    local spoolCmd="$SCRIPT_NAME?$userID&amp;$systemID&amp;spool"
    echo "<td><form method=POST action=\"${spoolCmd}\" accept-charset=utf-8>"
    echo "<input class=button $greenStyle type=submit value=\"Refresh console\">&nbsp;"
    echo "</form></td>"                    # end form and cell
  fi
 
  # add a 'CP commands' button to all pages but consolez
  if [ "$cmdCalled" != consolez ]; then    # add the button
    echo "<td><form action=\"/ldap/cpcmds?systemID=$systemID\" accept-charset=utf-8>"
    echo "<button class=button $greenStyle>CP commands</button>"
    echo "<input type=hidden name=systemID value=\"$systemID\">"
    echo "</form></td>"                    # end form and cell
  fi

  # add a 'Search' button
  if [ "$cmdCalled" != searchcons ]; then  # add the button
    echo "<td><form action=\"/ldap/searchcons\" accept-charset=utf-8>"
    echo "<button class=button $greenStyle>Search</button>"
    echo "</form></td>"                    # end form and cell
  fi

  # all pages get a 'Help' button
  echo "<td><form action='/consolez.pdf' accept-charset=utf-8>"
  echo "<button class=button $yellowStyle>Help</button>"
  echo "</form></td>"                      # end form, cell

  echo "</tr></table>"                     # row, table
 }

#---------------------------------------------------------------------------
function startCell
# Start a table cell
# Arg 1: optional color
#---------------------------------------------------------------------------
 {
  local color=""
  if [ $# = 1 ]; then                      # a color was passed in
    color=" style=\"background-color:$1;\""
  fi
  echo "<td$color>"
 }                                         # startCell()

#+--------------------------------------------------------------------------+
function uudecode
# Decode special characters - from stackoverflow:
# Using the : builtin, special parameters, pattern substitution and the echo
# builtin's -e option to translate hex codes into characters.
# Arg 1: the string to decode
#+--------------------------------------------------------------------------+
 {
  : "${*//+/ }"; echo -e "${_//%/\\x}";    # have no idea how this works
 }                                         # uudecode()

#+--------------------------------------------------------------------------+
function setWebUIvars
# If the file /etc/consolez-webui.conf exists, these values override defaults 
# Args: none
#+--------------------------------------------------------------------------+
 {
  local uiConfFile="/etc/consolez-webui.conf"
  if [ -f $uiConfFile ]; then              # file exists
    source $uiConfFile                     # override defaults
  fi
 }                                         # setWebUIvars()

#---------------------------------------------------------------------------
function setRole
# get the uid and gid of the logged in user and determine their role 
# Args: none
#---------------------------------------------------------------------------
 {
  # REMOTE_USER should always be set to who is logged in
  if [ ${#REMOTE_USER} = 0 ]; then         # not expected
    startPage ERROR
    startTable
    startRow "#FF6666"                     # draw row in light red
    echo "<td><h2>Unexpected!</h2><p>global REMOTE_USER is not set</p>"
    echo "</td></tr></table>"              # end cell, row and table
    exit 3                                 # internal server error
  fi
  if [ "$adminGID" = 0 ]; then             # all users are full admins
    role="admin"
    return                                 # all done
  fi

  # determine user's role based on their GID
  local idOut=`id $REMOTE_USER`
  local groups=`echo $idOut | awk -F'gid=' '{print $2}'`
  if [ ${#groups} = 0 ]; then
    startPage ERROR
    startTable
    startRow "#FF6666"                     # draw row in light red
    echo "<td><h2>Sorry!</h2><p>You are not authorized to use $cmdCalled</h2>"
    echo "Unexpected, no groups found in $idOut"
    echo "<p>REMOTE_USER = $REMOTE_USER idOut = $idOut </p>"
    echo "</td></tr></table>"              # end cell, row and table
    exit 2                                 # not authorized
  fi
  echo "$groups" | grep $adminGID >/dev/null
  if [ $? = 0 ]; then
    role="admin" 
  else
    echo "$groups" | grep $netadminGID >/dev/null
    if [ $? = 0 ]; then
      role="netadmin"
    else
      startPage ERROR
      startTable
      startRow "#FF6666"                     # draw row in light red
      echo "<td><h2>Sorry!</h2><p>You are not authorized to use $cmdCalled</h2>"
      echo "<p>REMOTE_USER = $REMOTE_USER idOut = $idOut gid = $gid</p>"
      echo "</td></tr></table>"              # end cell, row and table
      exit 2                                 # not authorized 
    fi
  fi

  # get the user Apache is running as
  USER=`ps -ef|egrep '(httpd|apache2|apache)'|grep -v root|head -n1|awk '{print $1}'`
 }                                         # setRole()

#+--------------------------------------------------------------------------+
function addScrollButton
# Draw a button that scrolls to bottom of page
# Args: none
#+--------------------------------------------------------------------------+
 {
  # JavaScript to scroll to bottom of page
  echo "<script>"
  echo "scrollingElement = (document.scrollingElement || document.body)"
  echo "function scrollToBottom () {"
  echo "   scrollingElement.scrollTop = scrollingElement.scrollHeight;"
  echo "}"
  # echo "function scrollToTop (id) {"
  # echo "   scrollingElement.scrollTop = 0;"
  # echo "}"
  echo "</script>"

  # add 'Scroll to bottom' button
  echo "<table align=center><tr><td>"      # start table, row and cell
  echo "<button class=button style=\"background-color:#8CFF66\" onClick=\"scrollToBottom()\">Scroll to Bottom</button>"
  echo "</td></tr></table>"                # end cell, row and table
  echo "<br>"                              # leave some room
 }                                         # addScrollButton()

#+--------------------------------------------------------------------------+
function showOneConsole
# Draw a page showing one saved console file
# Arg 1: user ID
# Arg 2: system ID
# Arg 3: option - if any
#+--------------------------------------------------------------------------+
 {
  local userID=$1
  local systemID=$2
  local option=$3

  local cmd                                # a command

  # add page title and a 'Scroll to bottom' button
  echo "<h3>$title</h3>"                   # add a heading
  addScrollButton                          # add a 'Scroll to bottom' button

  # check if user requested console to be spooled
  if [ "$option" = spool ]; then           # user asked to have console spooled
    cmd="/usr/local/sbin/spoolcons -w $USER $userID $systemID"
    echo "<pre align=\"center\">"
    # echo "Spooling console with command: $cmd ..."
    eval $cmd 2>&1                         # spool the specified console
    echo "Done!"
    echo "</pre>"
  fi

  # draw the main table
  echo '<table class="greenScreenTable" align="center">'
  echo "<tr>"
  startCell
  echo "<pre>"                             # preformatted text
  cmd="/usr/local/sbin/catcons -w $USER $userID $systemID"
  eval $cmd 2>&1                           # run script to list console
  echo "</pre></td></tr></table>"          # end preformatted, cell
  echo "</body></html>"                    # end the page
 }                                         # showOneConsole()

#+--------------------------------------------------------------------------+
function drawSearchBar
# Draw a search bar to find consoles by host name or user ID if such a tool
# exists, specified by the global variable 'searchTool'
# Args: none
#+--------------------------------------------------------------------------+
 {
  if [ ${#searchTool} = 0 -o "$role" != admin ]; then # tool name is not set or user is not an admin 
    return                                 # all done
  fi
  echo '<table class="consolezTable">'
  echo "<tr><form method=GET action=/ldap/searchforcons accept-charset=utf-8>"
  echo "<td><b>Search for z/VM consoles by host name or user ID:</b></td>" # what to search for
  echo "<td><input type=text id=searchString name=searchString></td>"
  echo "</form>"                           # end form
  echo "</tr></table><br>"                 # end row, table, leave some room
 }                                         # drawSearchBar{}

#---------------------------------------------------------------------------
# global variables
cmdCalled=`basename $0`                    # get the name of the script called
color1="#DAEAFF"                           # first background color 
headerColor="#fff2e6"                      # color of env divider rows - a muted orange
role="none"                                # user's role - 'admin' or 'netadmin'

# any of the following values can be overridden by creating the file /etc/consolez-webui.conf
adminGID=0                                 # GID of full administrators (0 = all users are admins)
netadminGID=0                              # GID of network administrators
# user IDs network admins can see:
netadminIDs="DTCVSW1 DTCVSW2 DTCVSW3 DTCVSW4 FTPSERVE SSL00001 SSL00002 SSL00003 SSL00004 SSL00005 TCPIP TCPMAINT" 
numCols=14                                 # number of columns in main tables
webIcon="consolez.ico"                     # browser tab icon in /srv/www/htdocs

